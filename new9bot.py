import logging
import sqlite3
import pandas as pd
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
c = conn.cursor()

def create_tables():
    c.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        username TEXT,
        post_count INTEGER DEFAULT 0
    )
    ''')
    c.execute('''
    CREATE TABLE IF NOT EXISTS user_posts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT,
        text TEXT
    )
    ''')
    conn.commit()
    logging.info("–¢–∞–±–ª–∏—Ü—ã users –∏ user_posts —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")

create_tables()

def update_user_data(user_id, first_name, last_name, username):
    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if c.fetchone():
        c.execute('UPDATE users SET first_name = ?, last_name = ?, username = ? WHERE user_id = ?',
                  (first_name, last_name, username, user_id))
    else:
        c.execute('INSERT INTO users (user_id, first_name, last_name, username, post_count) VALUES (?, ?, ?, ?, 0)',
                  (user_id, first_name, last_name, username))
    conn.commit()

def increment_post_count(user_id):
    c.execute('UPDATE users SET post_count = post_count + 1 WHERE user_id = ?', (user_id,))
    conn.commit()

def export_data_to_excel():
    df = pd.read_sql_query("SELECT * FROM users", conn)
    df.to_excel('user_data.xlsx', index=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    update_user_data(user.id, user.first_name, user.last_name, user.username)

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules')],
        [InlineKeyboardButton("–ü—Ä–∏–∑—ã", callback_data='prizes')],
        [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data='send_post')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç! üëã\n\n–≠—Ç–æ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ—Å—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞, –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã –ø–æ –Ω–∏–∫—É —Ç–µ–±—è –º–æ–≥ –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –µ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è ‚ùóÔ∏è\n\n–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º—ã —Å —Ç–æ–±–æ–π –Ω–µ —Å–º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è, –±—É–¥–µ–º –ø–µ—Ä–µ–≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–∏–º 14 –∏—é–Ω—è. –ë—É–¥–µ–º –≤—Ä—É—á–Ω—É—é –≤—ã–±–∏—Ä–∞—Ç—å —Å–∞–º—ã–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ, –Ω–µ–æ–±—ã—á–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ —Ä–∞–±–æ—Ç—ã, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ—Å—Ç–∞—Ä–∞–ª–∏—Å—å!\n\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚§µÔ∏è',
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'rules':
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if 'photo_messages' in context.user_data:
            for msg_id in context.user_data['photo_messages']:
                try:
                    await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        rules_text = (
            "–°—É–ø–µ—Ä! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø—Ä–∏–∑—ã üî•\n\n"
            "–ò—Ç–∞–∫, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–Ω–∫—É—Ä—Å–∞, —Ç–µ–±–µ –Ω—É–∂–Ω–æ:\n"
            "1. –ö—É–ø–∏—Ç—å —Ç–æ–ø–æ–≤—ã–π –º–µ—Ä—á –æ—Ç ¬´100–±–∞–ª–ª—å–Ω–æ–≥–æ¬ª, –µ—Å–ª–∏ —Ç—ã –µ—â—ë —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª. –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ª–µ—Ç–∞–π –ø–æ —Å—Å—ã–ª–∫–µ: https://100pointsmerch.ru/\n"
            "2. –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ, —Å–Ω—è—Ç—å –≤–∏–¥–µ–æ —Å–µ–±—è –≤ –º–µ—Ä—á–µ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ –∫—Ä–µ–∞—Ç–∏–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è üòâ) –∏ –≤—ã–ª–æ–∂–∏—Ç—å –≤ –õ–Æ–ë–£–Æ —Å–æ—Ü—Å–µ—Ç—å! –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å:\n"
            "‚Äî —Å—Ç–æ—Ä–∏—Å;\n"
            "‚Äî –ø–æ—Å—Ç—ã;\n"
            "‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ —Ä–æ–ª–∏–∫–∏;\n"
            "‚Äî —Å—Ç–∞—Ç—å–∏ —Å —Ñ–æ—Ç–∫–∞–º–∏ –∏ –≤–∏–¥–µ–æ.\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!\n"
            "3. –í—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ö—ç—à—Ç–µ–≥ #100–±–∞–ª–ª—å–Ω—ã–π–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –∏/–∏–ª–∏ –æ—Ç–º–µ—Ç–∫—É –Ω–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚ùóÔ∏è\n"
            "4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (—Å–∫—Ä–∏–Ω—à–æ—Ç + —Å—Å—ã–ª–∫–∞). –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω —Ö—ç—à—Ç–µ–≥ –∏ / –∏–ª–∏ –æ—Ç–º–µ—Ç–∫–∞ –Ω–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!"
        )

        await query.edit_message_text(
            text=rules_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ 8 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos = [
            'fotomerch/1.jpeg',
            'fotomerch/2.jpeg',
            'fotomerch/3.jpeg',
            'fotomerch/4.jpeg',
            'fotomerch/5.jpeg',
            'fotomerch/6.jpeg',
            'fotomerch/7.jpeg',
            'fotomerch/8.jpeg'
        ]

        context.user_data['photo_messages'] = []
        for photo in photos:
            try:
                msg = await context.bot.send_photo(chat_id=query.message.chat_id, photo=open(photo, 'rb'))
                context.user_data['photo_messages'].append(msg.message_id)
                await asyncio.sleep(2)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ {photo}: {e}")

    elif query.data == 'prizes':
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∑–∞—Ö –∏ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        await query.edit_message_text(
            text="–ß—Ç–æ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å?\n"
                 "‚Äî –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ Ozon –Ω–∞ 3000 —Ä—É–±–ª–µ–π (5 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π).\n"
                 "‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä casio (5 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π).\n"
                 "‚Äî –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ë—É–∫–≤–æ–µ–¥ –Ω–∞ 1000 —Ä—É–±–ª–µ–π (7 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π).\n"
                 "‚Äî –ü–æ–¥–ø–∏—Å–∫–∞ Wink+more.tv –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ (10 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
        )
    elif query.data == 'send_post':
        context.user_data['awaiting_post'] = True
        await query.edit_message_text(
            text="–û—Ç–ø—Ä–∞–≤—å –ø–æ—Å—Ç, —Å—Ç–æ—Ä–∏—Å –∏–ª–∏ –≤–∏–¥–µ–æ –∏–∑ –ª—é–±–æ–π —Å–æ—Ü—Å–µ—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–∫—Ä–∏–Ω + —Å—Å—ã–ª–∫–∞.\n\n"
                 "‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω —Ö—ç—à—Ç–µ–≥ #100–±–∞–ª–ª—å–Ω—ã–π–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –∏ / –∏–ª–∏ –æ—Ç–º–µ—Ç–∫–∞ –Ω–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
        )
    elif query.data == 'back_to_menu':
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if 'photo_messages' in context.user_data:
            for msg_id in context.user_data['photo_messages']:
                try:
                    await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules')],
            [InlineKeyboardButton("–ü—Ä–∏–∑—ã", callback_data='prizes')],
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data='send_post')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–ü—Ä–∏–≤–µ—Ç! üëã\n\n–≠—Ç–æ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ—Å—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!",
            reply_markup=reply_markup
        )

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = context.user_data
    message = update.message
    user = message.from_user

    if user_data.get('awaiting_post'):
        if message.photo:
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (–Ω–∞–∏–±–æ–ª—å—à–µ–µ)
            caption = message.caption
        elif message.document:
            photo = message.document
            caption = message.caption
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return

        info = f'–ü–æ—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: {user.id})\–Ω–°—Å—ã–ª–∫–∞: {caption if caption else "–ë–µ–∑ —Å—Å—ã–ª–∫–∏"}'
        for admin_id in [679030634, 1223531770]:
            if message.photo:
                await context.bot.send_photo(chat_id=admin_id, photo=photo.file_id, caption=info)
            else:
                await context.bot.send_document(chat_id=admin_id, document=photo.file_id, caption=info)

        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')],
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç", callback_data='send_post')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–°—É–ø–µ—Ä! –¢–≤–æ–π –ø–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç üòé\n\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø–æ—Å—Ç, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚§µÔ∏è",
            reply_markup=reply_markup
        )

        increment_post_count(user.id)
        user_data['awaiting_post'] = False

        # –ó–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É user_posts
        c.execute('INSERT INTO user_posts (username, text) VALUES (?, ?)', (user.username, caption))
        conn.commit()
    else:
        if message and not message.text.startswith('/'):
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id in [679030634, 1223531770]:
        export_data_to_excel()
        with open('user_data.xlsx', 'rb') as file:
            await context.bot.send_document(chat_id=user_id, document=file)
        await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def export_posts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id in [679030634, 1223531770]:
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_posts –≤ Excel
        df = pd.read_sql_query("SELECT * FROM user_posts", conn)
        df.to_excel('user_posts.xlsx', index=False)
        with open('user_posts.xlsx', 'rb') as file:
            await context.bot.send_document(chat_id=user_id, document=file)
        await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def main():
    TOKEN = '6708762418:AAFEgHko1kjBUrbO77Xd_nUjVC9SuTi1x6A'  # –ü–æ–º–µ–Ω—è–π—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("export", export_command))
    application.add_handler(CommandHandler("export_posts", export_posts_command))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler((filters.PHOTO | filters.TEXT), handle_media))

    application.run_polling()

if __name__ == '__main__':
    main()
